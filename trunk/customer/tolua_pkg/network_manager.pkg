$#include "network_manager.h"

$#include <functional>
$#include <string>
$#include <thread>

$#include "event2/bufferevent.h"
$#include "event2/event.h"

$#include "msg/msg.h"

//struct bufferevent;
//struct event_base;

namespace gamer
{

class NetworkManager
{
public:
    //NetworkManager& operator=(const NetworkManager&) = delete;

    //NetworkManager(const NetworkManager&) = delete;

    //void *operator new(std::size_t) = delete;
	
    static NetworkManager* getInstance();

    void connect();

    void disconnect();

    bool send(void* ctx, size_t ctxlen);

    inline void set_ip(const std::string& ip) { ip_ = ip; }

    inline const std::string& ip() const { return ip_; }

    inline void set_port(int port) { port_ = port; }

    inline int port() const { return port_; }
    
    inline bool is_connected() const { return is_connected_; }
};

} // namespace gamer