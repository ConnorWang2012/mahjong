--------------------------------------------------------------
-- This file was automatically generated by Cocos Studio.
-- Do not make changes to this file.
-- All changes will be lost.
--------------------------------------------------------------

local luaExtend = require "LuaExtend"

-- using for layout to decrease count of local variables
local layout = nil
local localLuaFile = nil
local innerCSD = nil
local innerProject = nil
local localFrame = nil

local Result = {}
------------------------------------------------------------
-- function call description
-- create function caller should provide a function to 
-- get a callback function in creating scene process.
-- the returned callback function will be registered to 
-- the callback event of the control.
-- the function provider is as below :
-- Callback callBackProvider(luaFileName, node, callbackName)
-- parameter description:
-- luaFileName  : a string, lua file name
-- node         : a Node, event source
-- callbackName : a string, callback function name
-- the return value is a callback function
------------------------------------------------------------
function Result.create(callBackProvider)

local result={}
setmetatable(result, luaExtend)

--Create tip_node
local tip_node=cc.Node:create()
tip_node:setName("tip_node")

--Create img_bg
local img_bg = ccui.ImageView:create()
img_bg:ignoreContentAdaptWithSize(false)
img_bg:loadTexture("assets/common/title_bg1.png",0)
img_bg:setScale9Enabled(true)
img_bg:setCapInsets({x = 264, y = 39, width = 272, height = 43})
img_bg:setLayoutComponentEnabled(true)
img_bg:setName("img_bg")
img_bg:setTag(11)
img_bg:setCascadeColorEnabled(true)
img_bg:setCascadeOpacityEnabled(true)
layout = ccui.LayoutComponent:bindLayoutComponent(img_bg)
layout:setSize({width = 1200.0000, height = 100.0000})
layout:setLeftMargin(-600.0000)
layout:setRightMargin(-600.0000)
layout:setTopMargin(-50.0000)
layout:setBottomMargin(-50.0000)
tip_node:addChild(img_bg)

--Create txt_tip
local txt_tip = ccui.Text:create()
txt_tip:ignoreContentAdaptWithSize(true)
txt_tip:setTextAreaSize({width = 0, height = 0})
txt_tip:setFontName("assets/font/FZZhengHeiS-B-GB.ttf")
txt_tip:setFontSize(40)
txt_tip:setString([[提示]])
txt_tip:setLayoutComponentEnabled(true)
txt_tip:setName("txt_tip")
txt_tip:setTag(12)
txt_tip:setCascadeColorEnabled(true)
txt_tip:setCascadeOpacityEnabled(true)
txt_tip:setPosition(600.0000, 50.0000)
layout = ccui.LayoutComponent:bindLayoutComponent(txt_tip)
layout:setPositionPercentXEnabled(true)
layout:setPositionPercentYEnabled(true)
layout:setPositionPercentX(0.5000)
layout:setPositionPercentY(0.5000)
layout:setPercentWidth(0.0683)
layout:setPercentHeight(0.4900)
layout:setSize({width = 82.0000, height = 49.0000})
layout:setLeftMargin(559.0000)
layout:setRightMargin(559.0000)
layout:setTopMargin(25.5000)
layout:setBottomMargin(25.5000)
img_bg:addChild(txt_tip)

--Create Animation
result['animation'] = ccs.ActionTimeline:create()
  
result['animation']:setDuration(0)
result['animation']:setTimeSpeed(1.0000)
--Create Animation List

result['root'] = tip_node
return result;
end

return Result

